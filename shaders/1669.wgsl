// http://www.fulcrum-demo.org/wp-content/uploads/2012/04/Cone_Marching_Mandelbox_by_Seven_Fulcrum_LongVersion.pdf

const PI = 3.1415926;

const EPS = .0001;
const FAR = 80.;

#define TILE_X 80 //SCREEN_WIDTH / 16
#define TILE_Y 40 //SCREEN_HEIGHT / 16

#storage march_mem array<array<atomic<i32>,TILE_Y>,TILE_X>
fn pack(f: f32) -> i32 { return bitcast<i32>(f); }
fn unpack(i: i32) -> f32 { return bitcast<f32>(i); }

fn banana(p: vec3f) -> f32 {
    if (dot(p, p) > 1.) {// || abs(p.y) > .25) {
        return max(length(p)-.9, abs(p.y)-.2);
    }
    let f0_0=sin(p.y*vec4f(-.42,-2.54,-.27,.85)+p.z*vec4f(2.21,2.23,-2.13,2.79)+p.x*vec4f(-.20,-.85,.68,1.08)+vec4f(-8.05,6.00,3.36,2.58));
    let f0_1=sin(p.y*vec4f(-3.64,-2.34,-.63,-2.44)+p.z*vec4f(.73,-1.30,1.61,-2.41)+p.x*vec4f(1.00,2.72,3.55,-3.20)+vec4f(-5.32,7.79,-1.04,4.09));
    let f0_2=sin(p.y*vec4f(-.38,-2.58,-.24,-.11)+p.z*vec4f(3.00,3.66,-4.09,-3.88)+p.x*vec4f(2.08,-1.30,-3.50,3.44)+vec4f(-.35,7.32,4.01,-7.54));
    let f0_3=sin(p.y*vec4f(-2.36,-1.82,-2.04,-1.16)+p.z*vec4f(.77,-.20,.38,-.14)+p.x*vec4f(.89,-2.83,3.63,1.68)+vec4f(.53,.38,-6.84,-4.03));
    let f1_0=sin(mat4x4f(-.14,-.45,-.19,.02,-.51,.20,-.36,-.36,-.23,-.73,-.59,-.04,.06,.62,-.24,.27)*f0_0+
        mat4x4f(-.24,-.30,.07,-.34,.14,-.19,.38,.09,.14,-.55,-.26,.20,-.43,.13,-.29,.08)*f0_1+
        mat4x4f(.12,.16,-.01,.03,-.10,-.11,-.09,.37,.09,.06,.03,.36,-.02,-.13,-.09,-.17)*f0_2+
        mat4x4f(-.78,.27,.23,.09,-.05,.24,-.34,.18,-.11,.02,.19,-.16,-.10,.53,-.43,.23)*f0_3+
        vec4f(-.47,-3.02,2.51,2.02))/1.0+f0_0;
    let f1_1=sin(mat4x4f(.18,.33,.35,.65,-.12,.60,.21,.31,-.46,.26,.36,-.58,-.09,.17,-.60,-.01)*f0_0+
        mat4x4f(-.02,-.15,-.11,.08,-.08,-.58,-.15,-.11,-.23,-.08,.26,.30,.10,.22,.03,-.30)*f0_1+
        mat4x4f(.47,.21,-.40,-.16,-.47,.05,-.21,.16,.05,.26,.23,-.24,.35,.38,.03,-.07)*f0_2+
        mat4x4f(-.30,.37,.01,.15,-.61,.25,.36,-.47,.48,-.31,-.44,-.50,-.17,-.18,-.45,-.04)*f0_3+
        vec4f(3.47,3.99,-1.75,.50))/1.0+f0_1;
    let f1_2=sin(mat4x4f(-.44,-.29,-.65,-.19,.12,.41,.04,.21,-.28,.15,.46,.30,.20,-.63,.09,-.10)*f0_0+
        mat4x4f(.35,-.32,-.91,-.55,-.19,.03,-.49,-.57,-.35,-.14,.50,.04,-.26,-.10,-.32,.49)*f0_1+
        mat4x4f(.17,-.43,-.27,-.17,-.03,-.13,.04,.55,-.06,-.35,-.49,-.01,.44,-.19,-.21,-.10)*f0_2+
        mat4x4f(.18,-.08,.66,-.08,-.16,-.60,.08,.10,.33,-.09,-.06,.13,.31,-.25,.45,-.90)*f0_3+
        vec4f(1.01,-2.01,4.08,.85))/1.0+f0_2;
    let f1_3=sin(mat4x4f(.64,-.61,-.36,-.13,-.32,-.62,.05,.45,-.25,.29,-.08,-.26,-.35,-.09,.58,-.57)*f0_0+
        mat4x4f(.44,-.24,-.02,.07,.53,-.35,.03,.08,-.46,-.18,.76,.33,-.06,-.17,.18,.18)*f0_1+
        mat4x4f(.62,-.91,-.14,.04,-.17,-.20,.31,.09,-.06,-.08,.01,-.48,.00,.08,-.10,.04)*f0_2+
        mat4x4f(-.42,.02,-.26,.14,-.53,.15,.59,-.24,.21,-.76,-.20,.17,-1.09,.08,-.52,-.57)*f0_3+
        vec4f(-3.84,.23,-2.55,1.41))/1.0+f0_3;
    let f2_0=sin(mat4x4f(.21,-.39,.71,.72,1.03,-.47,-.58,-.29,.04,.39,-.06,-.45,-.01,-.08,.34,-.16)*f1_0+
        mat4x4f(.54,-.04,-.01,.49,-.19,.50,.20,.20,.52,.36,.04,.23,.41,-.06,.49,.02)*f1_1+
        mat4x4f(.29,-.33,-.67,-.21,.09,.53,.31,-.48,-.59,.10,.39,.23,-.14,.17,-.37,.42)*f1_2+
        mat4x4f(.21,.05,-.38,-.44,-.10,-.36,.40,-.04,-.12,.07,.22,.67,-.22,.04,.22,-.38)*f1_3+
        vec4f(.66,1.52,-3.18,-2.63))/1.4+f1_0;
    let f2_1=sin(mat4x4f(.07,-.18,-.23,-.19,-.38,.40,.22,-1.21,.38,-.28,-.07,-.77,-.19,.13,-.38,-.28)*f1_0+
        mat4x4f(.23,-.65,.04,.39,-.10,-.18,-.59,1.43,-.28,-.11,.24,-.30,-.22,.08,-.23,-.23)*f1_1+
        mat4x4f(.12,-1.05,-.01,.26,-.18,.50,.21,-.63,-.69,-.09,-.50,.04,-.07,-.30,.41,.52)*f1_2+
        mat4x4f(-.42,.96,.22,-.54,.23,-.58,-.31,-.08,.45,-.59,-.00,-.14,-.98,.10,.41,.04)*f1_3+
        vec4f(2.27,1.21,-1.12,2.14))/1.4+f1_1;
    let f2_2=sin(mat4x4f(-.95,.20,.43,-.43,.46,.20,.49,1.07,.45,-.24,.16,.42,.40,.00,-.80,.21)*f1_0+
        mat4x4f(-.18,.13,.10,-.09,-.08,.30,-.24,.55,-.26,-.46,-.14,-.15,-.59,-.09,-.17,.74)*f1_1+
        mat4x4f(.21,-.60,-.20,-.33,.29,.24,-.43,.09,.07,.06,.40,.96,-.11,-.00,.01,.00)*f1_2+
        mat4x4f(-.14,-.04,-.19,.15,.03,-.24,.20,.59,-.46,.16,-.09,.62,.48,-.50,.02,.59)*f1_3+
        vec4f(-.39,-.26,-.83,3.18))/1.4+f1_2;
    let f2_3=sin(mat4x4f(.16,-.18,.54,.06,-.44,-.02,-.22,-.65,-.04,-.99,.19,-.41,.09,.68,.34,-.10)*f1_0+
        mat4x4f(.21,-.57,.07,.35,.64,.29,.07,-.01,.60,-.01,.85,.22,.09,-.27,.59,-.09)*f1_1+
        mat4x4f(.68,-.33,-.19,.16,-.36,.33,.54,.39,-.01,-.24,.74,-.50,-.14,-.38,.09,-.37)*f1_2+
        mat4x4f(-.30,.03,.10,.15,.21,-.48,.20,.45,.19,-.38,.32,-.12,-.15,.50,.30,.62)*f1_3+
        vec4f(2.22,-.58,2.91,1.21))/1.4+f1_3;
    let f3_0=sin(mat4x4f(.27,.20,-.33,.25,-.21,.75,.86,1.17,.12,-.25,.10,.01,.25,.66,.03,.18)*f2_0+
        mat4x4f(-.97,.16,-.11,-.16,-.46,-.28,.15,.35,-.01,.34,-.10,.15,-.70,.48,.53,.36)*f2_1+
        mat4x4f(.07,-.99,.54,-.00,-.71,.13,-.08,-.62,-.97,-1.13,.91,.33,-.03,-.23,-.41,.07)*f2_2+
        mat4x4f(.31,.34,-.36,.11,.70,-.23,-.01,.54,-.43,-.18,.48,-.08,.01,-.14,-.28,.57)*f2_3+
        vec4f(-1.71,.53,1.25,.02))/1.7+f2_0;
    let f3_1=sin(mat4x4f(-.18,.33,-.19,-.15,-.22,-.47,.83,.50,-.37,-.06,-.33,-.54,-.21,-.64,.22,-.13)*f2_0+
        mat4x4f(.34,-.10,.50,-.83,-.04,-.07,-.18,-.37,.23,.56,-.69,-.10,-.20,.27,-.29,.04)*f2_1+
        mat4x4f(.06,.30,.77,-.73,.38,-.50,-.35,-.19,-.18,-.28,-.49,-.37,-.14,.12,-.02,-.03)*f2_2+
        mat4x4f(-.03,.15,-.24,-1.07,-.06,-.11,.00,-.13,.46,-.21,-.02,.49,-.02,.63,.44,-.03)*f2_3+
        vec4f(.59,-2.45,2.34,-.22))/1.7+f2_1;
    let f3_2=sin(mat4x4f(-.42,-.48,-.25,.61,-.77,.11,-.36,-.32,.07,.57,.06,.22,.21,.49,-.21,-.07)*f2_0+
        mat4x4f(-.24,-.36,.35,-.05,-.05,-.43,.34,.24,.56,-.06,.09,-.03,-.10,-.17,-.19,-.54)*f2_1+
        mat4x4f(-.40,-.50,.16,.32,.38,.08,.11,-.36,-.10,.46,-.04,-.13,-.08,-.43,.43,.47)*f2_2+
        mat4x4f(.10,.82,-.58,.33,-.18,.26,.67,.54,.34,.03,-.22,.58,-.13,-.40,.91,-.37)*f2_3+
        vec4f(-3.23,-3.08,-1.52,1.70))/1.7+f2_2;
    let f3_3=sin(mat4x4f(.25,.05,-.33,.23,-.21,.35,-.67,-.26,.59,.49,-.12,.04,.26,-.90,.23,.03)*f2_0+
        mat4x4f(-.45,.57,-.00,.18,-.34,.80,-.12,.30,.27,.12,.20,-.15,.38,.10,.52,-.13)*f2_1+
        mat4x4f(-.13,-.52,-.38,-.27,.50,.28,.88,-.03,.07,.33,.62,-.27,.08,.79,-.24,.12)*f2_2+
        mat4x4f(.29,-.17,.26,-.11,.47,-.01,.18,.61,.67,.17,.47,.35,-.09,-.20,-.27,.24)*f2_3+
        vec4f(-.68,2.84,-2.36,.89))/1.7+f2_3;
    return dot(f3_0,vec4f(.02,.02,.08,.04))+
        dot(f3_1,vec4f(-.06,-.06,-.07,-.01))+
        dot(f3_2,vec4f(.07,-.05,-.04,-.04))+
        dot(f3_3,vec4f(.04,.04,.05,.05))
        +0.02*clamp(-p.x+.5, 0., 1.)+.01;
}

fn opLimArray(p: vec3f, c: f32, lim: vec3f) -> vec3f {
  return p - c * clamp(round(p / c), -lim, lim);
}

fn map(p: vec3f) -> f32 {
    let p2 = opLimArray(p, 3., vec3f(8.));
    return banana(p2.xzy-vec3(-.1,0,.1));
}

fn normal(p: vec3f) -> vec3f {
    let e = vec2f(EPS, 0.);
    return normalize(vec3f(
        map(p + e.xyy) - map(p - e.xyy),
        map(p + e.yxy) - map(p - e.yxy),
        map(p + e.yyx) - map(p - e.yyx)
    ));
}

fn rotX(p: vec3f, a: f32) -> vec3f { let r = p.yz * cos(a) + vec2f(-p.z, p.y) * sin(a); return vec3f(p.x, r); }
fn rotY(p: vec3f, a: f32) -> vec3f { let r = p.xz * cos(a) + vec2f(-p.z, p.x) * sin(a); return vec3f(r.x, p.y, r.y); }
fn rotM(p: vec3f, m: vec2f) -> vec3f { return rotY(rotX(p, -PI * m.y), 2 * PI * m.x); }

fn conemarch(ro: vec3f, rd: vec3f, s0: f32) -> vec4f {
    var p: vec3f;
    var s: f32 = s0;
    let ratio = f32(SCREEN_WIDTH) / f32(SCREEN_HEIGHT);
    let ceps = 4. / max(TILE_X, TILE_Y);
    for (var i = 0; i < 80; i++) {
        p = ro + s * rd;
        let ds = map(p);
        if (ds < s * ceps || s > FAR) { break; }
        s += ds;
    }
    return vec4f(p, s);
}

fn march(ro: vec3f, rd: vec3f, s0: f32) -> vec4f {
    var p: vec3f;
    var s: f32 = s0;
    for (var i = 0; i < 80; i++) {
        p = ro + s * rd;
        let ds = map(p);
        s += ds;
        if (ds < EPS || s > FAR) { break; }
    }
    return vec4f(p, s);
}

#workgroup_count premarch TILE_X TILE_Y 1
@compute @workgroup_size(16, 16)
fn premarch(@builtin(global_invocation_id) gid: vec3u) {
    var res = vec2u(SCREEN_WIDTH, SCREEN_HEIGHT) / 16u + 1u;
    if (gid.x >= res.x || gid.y >= res.y) { return; }

    let uv = (2.*(vec2f(gid.xy) + .5) - vec2f(res)) / f32(res.y);
    var ro = vec3f(0, 0, 2);
    var rd = normalize(vec3f(uv, -2));  
    res = textureDimensions(screen);
    ro = rotM(ro, vec2f(mouse.pos) / vec2f(res) - .5);
    rd = rotM(rd, vec2f(mouse.pos) / vec2f(res) - .5);
    
    let m = conemarch(ro, rd, 0.);
    atomicStore(&march_mem[gid.x][gid.y], pack(m.w));
}

#workgroup_count main_image SCREEN_WIDTH SCREEN_HEIGHT 1
@compute @workgroup_size(16, 16)
fn main_image(
    @builtin(global_invocation_id) gid: vec3u,
    @builtin(workgroup_id) wid: vec3u
) {
    let res = textureDimensions(screen);
    if (gid.x >= res.x || gid.y >= res.y) { return; }

    let uv = (2.*(vec2f(gid.xy) + .5) - vec2f(res)) / f32(res.y);
    var ro = vec3f(0, 0, 2);
    var rd = normalize(vec3f(uv, -2));  
    ro = rotM(ro, vec2f(mouse.pos) / vec2f(res) - .5);
    rd = rotM(rd, vec2f(mouse.pos) / vec2f(res) - .5);

    var s = unpack(atomicLoad(&march_mem[wid.x][wid.y]));
    //var m = vec4f(ro + s * rd, s);
    //var s = 0.;
    let m = march(ro, rd, s);

    let n = normal(m.xyz);
    let l = normalize(vec3f(-1,0,1));

    let bg = mix(vec3f(1., 0.57, 0.), vec3f(0.93, 0.14, 0.), f32(gid.y) / f32(res.y));
    var col = vec3f(n*.5+.5);
    col = select(bg*bg, col*col, m.w < FAR);
    textureStore(screen, vec2u(gid.x, res.y-1-gid.y), vec4f(col, 1.));
}