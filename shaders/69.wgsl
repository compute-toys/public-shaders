#define T_MIN .01
#define T_MAX 1000.

#define MAT_MIRROR    0
#define MAT_DIFFUSE_W 1
#define MAT_DIFFUSE_R 2
#define MAT_DIFFUSE_G 3
#define MAT_EMISSIVE  4

#define SHAPE_TRIANGLE 0

#define WL_START 400.
#define WL_SAMPLES 300

#define PI 3.14159
#define TAU 6.2831855

#storage store array<float4>

const white = array<float, WL_SAMPLES>(0.343, 0.36850000000000005, 0.394, 0.4195, 0.445, 0.47150000000000003, 0.498, 0.5245, 0.551, 0.56925, 0.5875, 0.60575, 0.624, 0.63425, 0.6445000000000001, 0.65475, 0.665, 0.6705000000000001, 0.676, 0.6815, 0.687, 0.69225, 0.6975, 0.70275, 0.708, 0.7117499999999999, 0.7155, 0.71925, 0.723, 0.721, 0.719, 0.717, 0.715, 0.71375, 0.7124999999999999, 0.7112499999999999, 0.71, 0.71875, 0.7275, 0.73625, 0.745, 0.74825, 0.7515000000000001, 0.75475, 0.758, 0.75325, 0.7484999999999999, 0.74375, 0.739, 0.746, 0.753, 0.76, 0.767, 0.7695000000000001, 0.772, 0.7745, 0.777, 0.774, 0.771, 0.768, 0.765, 0.7615, 0.758, 0.7545000000000001, 0.751, 0.7495, 0.748, 0.7464999999999999, 0.745, 0.7457499999999999, 0.7464999999999999, 0.74725, 0.748, 0.74325, 0.7384999999999999, 0.7337499999999999, 0.729, 0.733, 0.737, 0.741, 0.745, 0.748, 0.751, 0.754, 0.757, 0.756, 0.755, 0.754, 0.753, 0.75225, 0.7515000000000001, 0.75075, 0.75, 0.749, 0.748, 0.747, 0.746, 0.74625, 0.7464999999999999, 0.74675, 0.747, 0.744, 0.741, 0.738, 0.735, 0.7342500000000001, 0.7335, 0.7327499999999999, 0.732, 0.7337499999999999, 0.7355, 0.73725, 0.739, 0.73775, 0.7364999999999999, 0.73525, 0.734, 0.73175, 0.7295, 0.72725, 0.725, 0.724, 0.723, 0.722, 0.721, 0.724, 0.727, 0.73, 0.733, 0.731, 0.729, 0.727, 0.725, 0.72675, 0.7284999999999999, 0.73025, 0.732, 0.7347499999999999, 0.7375, 0.7402500000000001, 0.743, 0.74325, 0.7435, 0.74375, 0.744, 0.7450000000000001, 0.746, 0.7469999999999999, 0.748, 0.7429999999999999, 0.738, 0.7330000000000001, 0.728, 0.7250000000000001, 0.722, 0.7189999999999999, 0.716, 0.72025, 0.7244999999999999, 0.72875, 0.733, 0.73125, 0.7295, 0.72775, 0.726, 0.72275, 0.7195, 0.7162499999999999, 0.713, 0.7197499999999999, 0.7264999999999999, 0.73325, 0.74, 0.7434999999999999, 0.747, 0.7505, 0.754, 0.7565, 0.759, 0.7615, 0.764, 0.7609999999999999, 0.758, 0.7550000000000001, 0.752, 0.748, 0.744, 0.74, 0.736, 0.7355, 0.735, 0.7344999999999999, 0.734, 0.73575, 0.7375, 0.73925, 0.741, 0.74075, 0.7404999999999999, 0.74025, 0.74, 0.738, 0.736, 0.734, 0.732, 0.73525, 0.7384999999999999, 0.7417499999999999, 0.745, 0.7474999999999999, 0.75, 0.7525000000000001, 0.755, 0.754, 0.753, 0.752, 0.751, 0.74925, 0.7475, 0.74575, 0.744, 0.74075, 0.7375, 0.7342500000000001, 0.731, 0.7315, 0.732, 0.7324999999999999, 0.733, 0.7357499999999999, 0.7384999999999999, 0.7412500000000001, 0.744, 0.74075, 0.7375, 0.7342500000000001, 0.731, 0.7262500000000001, 0.7215, 0.71675, 0.712, 0.7110000000000001, 0.71, 0.7089999999999999, 0.708, 0.7132499999999999, 0.7184999999999999, 0.7237499999999999, 0.729, 0.72925, 0.7295, 0.72975, 0.73, 0.72925, 0.7284999999999999, 0.72775, 0.727, 0.722, 0.717, 0.712, 0.707, 0.706, 0.705, 0.704, 0.703, 0.7095, 0.716, 0.7224999999999999, 0.729, 0.73425, 0.7395, 0.74475, 0.75, 0.7525, 0.755, 0.7575000000000001, 0.76, 0.75775, 0.7555000000000001, 0.75325, 0.751, 0.748, 0.745, 0.742, 0.739, 0.73525, 0.7315, 0.7277499999999999, 0.724, 0.7254999999999999, 0.727, 0.7284999999999999, 0.73, 0.7324999999999999, 0.735, 0.7374999999999999, 0.74, 0.73925, 0.7384999999999999, 0.7377499999999999);
const green = array<float, WL_SAMPLES>(0.092, 0.093, 0.094, 0.095, 0.096, 0.0965, 0.097, 0.0975, 0.098, 0.09775, 0.0975, 0.09725, 0.097, 0.09725, 0.0975, 0.09775, 0.098, 0.09725, 0.0965, 0.09575, 0.095, 0.095, 0.095, 0.095, 0.095, 0.0955, 0.096, 0.0965, 0.097, 0.0965, 0.096, 0.0955, 0.095, 0.09475, 0.0945, 0.09425, 0.094, 0.09475, 0.0955, 0.09625, 0.097, 0.09725, 0.0975, 0.09775, 0.098, 0.0975, 0.097, 0.0965, 0.096, 0.09725, 0.0985, 0.09975, 0.101, 0.1015, 0.10200000000000001, 0.10250000000000001, 0.103, 0.10325, 0.1035, 0.10375, 0.104, 0.10475, 0.1055, 0.10625, 0.107, 0.1075, 0.108, 0.1085, 0.109, 0.10975, 0.1105, 0.11125, 0.112, 0.11275, 0.1135, 0.11425, 0.115, 0.11750000000000001, 0.12, 0.1225, 0.125, 0.12875, 0.1325, 0.13625, 0.14, 0.14500000000000002, 0.15000000000000002, 0.155, 0.16, 0.16675, 0.1735, 0.18025, 0.187, 0.19749999999999998, 0.20800000000000002, 0.21850000000000003, 0.229, 0.243, 0.257, 0.271, 0.285, 0.2995, 0.314, 0.3285, 0.343, 0.35475, 0.36650000000000005, 0.37825, 0.39, 0.40125, 0.4125, 0.42374999999999996, 0.435, 0.44225, 0.4495, 0.45675000000000004, 0.464, 0.466, 0.46799999999999997, 0.47, 0.472, 0.473, 0.474, 0.475, 0.476, 0.47724999999999995, 0.4785, 0.47975, 0.481, 0.47625, 0.47150000000000003, 0.46675, 0.462, 0.45825000000000005, 0.4545, 0.45075, 0.447, 0.4455, 0.444, 0.4425, 0.441, 0.43724999999999997, 0.4335, 0.42975, 0.426, 0.42100000000000004, 0.41600000000000004, 0.411, 0.406, 0.39775, 0.3895, 0.38125, 0.373, 0.3665, 0.36, 0.3535, 0.347, 0.3445, 0.34199999999999997, 0.3395, 0.337, 0.33125000000000004, 0.3255, 0.31975, 0.314, 0.30674999999999997, 0.2995, 0.29225, 0.285, 0.28300000000000003, 0.281, 0.279, 0.277, 0.27425, 0.2715, 0.26875000000000004, 0.266, 0.262, 0.258, 0.254, 0.25, 0.245, 0.24, 0.23500000000000001, 0.23, 0.22425, 0.2185, 0.21275, 0.207, 0.20174999999999998, 0.1965, 0.19125, 0.186, 0.18225000000000002, 0.1785, 0.17475000000000002, 0.171, 0.16825, 0.1655, 0.16275, 0.16, 0.157, 0.154, 0.151, 0.148, 0.14625, 0.1445, 0.14275, 0.141, 0.13974999999999999, 0.1385, 0.13725, 0.136, 0.1345, 0.133, 0.1315, 0.13, 0.129, 0.128, 0.127, 0.126, 0.12525, 0.1245, 0.12375, 0.123, 0.1225, 0.122, 0.1215, 0.121, 0.12125, 0.1215, 0.12175, 0.122, 0.12125, 0.1205, 0.11975, 0.119, 0.11775, 0.11649999999999999, 0.11525, 0.114, 0.11425, 0.1145, 0.11475, 0.115, 0.1155, 0.116, 0.1165, 0.117, 0.117, 0.117, 0.117, 0.117, 0.11725000000000001, 0.1175, 0.11775, 0.118, 0.1185, 0.119, 0.1195, 0.12, 0.1205, 0.121, 0.1215, 0.122, 0.1235, 0.125, 0.1265, 0.128, 0.129, 0.13, 0.131, 0.132, 0.13375, 0.1355, 0.13725, 0.139, 0.14025, 0.14150000000000001, 0.14275, 0.144, 0.1445, 0.145, 0.1455, 0.146, 0.147, 0.148, 0.149, 0.15, 0.1505, 0.151, 0.1515, 0.152, 0.15325, 0.1545, 0.15575, 0.157, 0.1575, 0.158, 0.1585);
const red   = array<float, WL_SAMPLES>(0.04, 0.041499999999999995, 0.043, 0.044500000000000005, 0.046, 0.0465, 0.047, 0.0475, 0.048, 0.04925, 0.0505, 0.051750000000000004, 0.053, 0.052000000000000005, 0.051000000000000004, 0.05, 0.049, 0.04925, 0.0495, 0.04975, 0.05, 0.05075, 0.051500000000000004, 0.052250000000000005, 0.053, 0.0535, 0.054, 0.0545, 0.055, 0.0555, 0.056, 0.0565, 0.057, 0.05675, 0.0565, 0.05625, 0.056, 0.05675, 0.057499999999999996, 0.058249999999999996, 0.059, 0.058499999999999996, 0.057999999999999996, 0.0575, 0.057, 0.058, 0.059, 0.06, 0.061, 0.061, 0.061, 0.061, 0.061, 0.06075, 0.0605, 0.06025, 0.06, 0.0605, 0.061, 0.0615, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.06175, 0.0615, 0.06125, 0.061, 0.06125, 0.0615, 0.06175, 0.062, 0.0615, 0.061, 0.0605, 0.06, 0.05975, 0.0595, 0.05925, 0.059, 0.058499999999999996, 0.057999999999999996, 0.0575, 0.057, 0.05725, 0.0575, 0.05775, 0.058, 0.058, 0.058, 0.058, 0.058, 0.058, 0.058, 0.058, 0.058, 0.0575, 0.057, 0.0565, 0.056, 0.05575, 0.0555, 0.05525, 0.055, 0.05525, 0.0555, 0.05575, 0.056, 0.05675, 0.057499999999999996, 0.058249999999999996, 0.059, 0.058499999999999996, 0.057999999999999996, 0.0575, 0.057, 0.0565, 0.056, 0.0555, 0.055, 0.056, 0.056999999999999995, 0.057999999999999996, 0.059, 0.059, 0.059, 0.059, 0.059, 0.05875, 0.058499999999999996, 0.05825, 0.058, 0.05825, 0.058499999999999996, 0.05875, 0.059, 0.0595, 0.06, 0.0605, 0.061, 0.061, 0.061, 0.061, 0.061, 0.0615, 0.062, 0.0625, 0.063, 0.063, 0.063, 0.063, 0.063, 0.064, 0.065, 0.066, 0.067, 0.06725, 0.0675, 0.06775, 0.068, 0.069, 0.07, 0.071, 0.072, 0.074, 0.076, 0.078, 0.08, 0.08249999999999999, 0.08499999999999999, 0.08750000000000001, 0.09, 0.09225, 0.0945, 0.09675, 0.099, 0.10525000000000001, 0.1115, 0.11775, 0.124, 0.1315, 0.139, 0.1465, 0.154, 0.16349999999999998, 0.173, 0.18250000000000002, 0.192, 0.20775000000000002, 0.2235, 0.23925000000000002, 0.255, 0.263, 0.271, 0.279, 0.287, 0.3025, 0.31799999999999995, 0.33349999999999996, 0.349, 0.36224999999999996, 0.3755, 0.38875, 0.402, 0.41225, 0.4225, 0.43274999999999997, 0.443, 0.45399999999999996, 0.46499999999999997, 0.476, 0.487, 0.49349999999999994, 0.5, 0.5065000000000001, 0.513, 0.5242500000000001, 0.5355000000000001, 0.5467500000000001, 0.558, 0.5645, 0.571, 0.5774999999999999, 0.584, 0.593, 0.602, 0.611, 0.62, 0.6164999999999999, 0.613, 0.6095, 0.606, 0.60675, 0.6074999999999999, 0.60825, 0.609, 0.6194999999999999, 0.63, 0.6405000000000001, 0.651, 0.64125, 0.6315, 0.62175, 0.612, 0.6114999999999999, 0.611, 0.6105, 0.61, 0.62, 0.63, 0.64, 0.65, 0.647, 0.644, 0.641, 0.638, 0.6352500000000001, 0.6325000000000001, 0.62975, 0.627, 0.62525, 0.6234999999999999, 0.62175, 0.62, 0.6224999999999999, 0.625, 0.6275000000000001, 0.63, 0.6295000000000001, 0.629, 0.6285, 0.628, 0.6315, 0.635, 0.6385000000000001, 0.642, 0.6412500000000001, 0.6405000000000001, 0.63975, 0.639, 0.6435, 0.648, 0.6525000000000001, 0.657, 0.6525000000000001, 0.648, 0.6435, 0.639, 0.638, 0.637, 0.636, 0.635, 0.63675, 0.6385000000000001, 0.64025);
const light = array<float, WL_SAMPLES>(0.0, 0.08, 0.16, 0.24, 0.32, 0.4, 0.48, 0.56, 0.64, 0.72, 0.8, 0.88, 0.96, 1.04, 1.12, 1.2, 1.28, 1.36, 1.44, 1.52, 1.6, 1.68, 1.76, 1.84, 1.92, 2.0, 2.08, 2.16, 2.24, 2.32, 2.4, 2.48, 2.56, 2.64, 2.72, 2.8, 2.88, 2.96, 3.04, 3.12, 3.2, 3.28, 3.36, 3.44, 3.52, 3.6, 3.68, 3.76, 3.84, 3.92, 4.0, 4.08, 4.16, 4.24, 4.32, 4.4, 4.48, 4.56, 4.64, 4.72, 4.8, 4.88, 4.96, 5.04, 5.12, 5.2, 5.28, 5.36, 5.44, 5.52, 5.6, 5.68, 5.76, 5.84, 5.92, 6.0, 6.08, 6.16, 6.24, 6.32, 6.4, 6.48, 6.56, 6.64, 6.72, 6.8, 6.88, 6.96, 7.04, 7.12, 7.2, 7.28, 7.36, 7.44, 7.52, 7.6, 7.68, 7.76, 7.84, 7.92, 8.0, 8.076, 8.152, 8.228, 8.304, 8.379999999999999, 8.456, 8.532, 8.608, 8.684000000000001, 8.76, 8.836, 8.911999999999999, 8.988, 9.064, 9.14, 9.216, 9.292, 9.368, 9.444, 9.52, 9.596, 9.672, 9.748000000000001, 9.824, 9.9, 9.975999999999999, 10.052, 10.128, 10.204, 10.28, 10.356, 10.431999999999999, 10.508, 10.584, 10.66, 10.736, 10.812000000000001, 10.888, 10.963999999999999, 11.04, 11.116, 11.192, 11.268, 11.344000000000001, 11.42, 11.496, 11.572, 11.648, 11.724, 11.8, 11.876, 11.952, 12.028, 12.104, 12.18, 12.256, 12.332, 12.408000000000001, 12.483999999999998, 12.559999999999999, 12.636, 12.712, 12.788, 12.864, 12.940000000000001, 13.015999999999998, 13.091999999999999, 13.168, 13.244, 13.32, 13.395999999999999, 13.472, 13.548, 13.624, 13.7, 13.776, 13.852, 13.927999999999999, 14.004, 14.08, 14.156, 14.232, 14.308, 14.384, 14.46, 14.536000000000001, 14.611999999999998, 14.687999999999999, 14.764, 14.84, 14.916, 14.992, 15.068000000000001, 15.144, 15.219999999999999, 15.296, 15.372, 15.448, 15.524, 15.6, 15.627999999999998, 15.656, 15.684, 15.712, 15.739999999999998, 15.767999999999999, 15.796, 15.824, 15.852, 15.879999999999999, 15.908000000000001, 15.936, 15.963999999999999, 15.992, 16.02, 16.048, 16.076, 16.104, 16.132, 16.16, 16.188, 16.216, 16.244, 16.272, 16.299999999999997, 16.328, 16.356, 16.384, 16.412, 16.439999999999998, 16.468, 16.496, 16.523999999999997, 16.552, 16.58, 16.608, 16.636, 16.664, 16.692, 16.72, 16.747999999999998, 16.776, 16.804000000000002, 16.832, 16.86, 16.887999999999998, 16.916, 16.944, 16.972, 17.0, 17.028, 17.055999999999997, 17.084, 17.112, 17.14, 17.168, 17.195999999999998, 17.224, 17.252, 17.28, 17.308, 17.336, 17.363999999999997, 17.392, 17.419999999999998, 17.448, 17.476, 17.503999999999998, 17.531999999999996, 17.56, 17.587999999999997, 17.616, 17.644, 17.672, 17.7, 17.727999999999998, 17.756, 17.784, 17.811999999999998, 17.839999999999996, 17.868, 17.895999999999997, 17.924, 17.951999999999998, 17.98, 18.008, 18.035999999999998, 18.064, 18.092, 18.119999999999997, 18.148, 18.176000000000002, 18.203999999999997, 18.232, 18.259999999999998, 18.287999999999997, 18.316, 18.344, 18.371999999999996);

const xyz_bar = array<float3, WL_SAMPLES>(vec3(0.037981,0.0028,0.17409), vec3(0.043016200000000004,0.0031712400000000005,0.197298), vec3(0.0480514,0.0035424799999999998,0.22050599999999998), vec3(0.053086600000000005,0.00391372,0.243714), vec3(0.0581218,0.00428496,0.266922), vec3(0.063157,0.0046562,0.29013), vec3(0.0705138,0.005204960000000001,0.32421), vec3(0.07787060000000001,0.00575372,0.35829), vec3(0.08522740000000001,0.006302480000000001,0.39237), vec3(0.0925842,0.006851240000000001,0.42645), vec3(0.099941,0.0074,0.46053), vec3(0.1116008,0.0082758,0.514756), vec3(0.1232606,0.0091516,0.568982), vec3(0.1349204,0.0100274,0.623208), vec3(0.1465802,0.0109032,0.677434), vec3(0.15824,0.011779,0.73166), vec3(0.172488,0.0129232,0.798488), vec3(0.18673599999999999,0.0140674,0.865316), vec3(0.200984,0.0152116,0.9321440000000001), vec3(0.21523199999999998,0.0163558,0.998972), vec3(0.22948,0.0175,1.0658), vec3(0.2398,0.018535600000000003,1.11556), vec3(0.25012,0.0195712,1.16532), vec3(0.26044,0.0206068,1.21508), vec3(0.27076,0.0216424,1.26484), vec3(0.28108,0.022678,1.3146), vec3(0.28705400000000003,0.0236024,1.34512), vec3(0.293028,0.0245268,1.3756400000000002), vec3(0.299002,0.0254512,1.4061599999999999), vec3(0.304976,0.0263756,1.43668), vec3(0.31095,0.0273,1.4672), vec3(0.314904,0.0283568,1.4896800000000001), vec3(0.318858,0.029413599999999998,1.51216), vec3(0.322812,0.0304704,1.53464), vec3(0.326766,0.0315272,1.5571199999999998), vec3(0.33072,0.032584,1.5796), vec3(0.33124800000000004,0.0336472,1.587), vec3(0.33177599999999996,0.0347104,1.5944), vec3(0.33230400000000004,0.0357736,1.6018), vec3(0.33283199999999996,0.0368368,1.6092000000000002), vec3(0.33336,0.0379,1.6166), vec3(0.330032,0.038798200000000005,1.6069200000000001), vec3(0.326704,0.0396964,1.59724), vec3(0.323376,0.0405946,1.58756), vec3(0.320048,0.041492799999999996,1.57788), vec3(0.31672,0.042391,1.5682), vec3(0.31113999999999997,0.0432728,1.5489000000000002), vec3(0.30556000000000005,0.0441546,1.5295999999999998), vec3(0.29998,0.045036400000000004,1.5103), vec3(0.2944,0.0459182,1.4909999999999999), vec3(0.28882,0.0468,1.4717), vec3(0.282994,0.0478644,1.4521600000000001), vec3(0.27716799999999997,0.0489288,1.43262), vec3(0.27134199999999997,0.0499932,1.41308), vec3(0.265516,0.0510576,1.3935400000000002), vec3(0.25969,0.052122,1.374), vec3(0.254304,0.0536976,1.3575400000000002), vec3(0.24891799999999997,0.0552732,1.34108), vec3(0.243532,0.0568488,1.3246200000000001), vec3(0.238146,0.0584244,1.30816), vec3(0.23276,0.06,1.2917), vec3(0.22820600000000002,0.0625884,1.28048), vec3(0.22365200000000002,0.06517680000000001,1.26926), vec3(0.21909800000000001,0.0677652,1.25804), vec3(0.214544,0.0703536,1.24682), vec3(0.20999,0.072942,1.2356), vec3(0.20294400000000004,0.07654960000000001,1.21124), vec3(0.19589800000000002,0.08015720000000001,1.18688), vec3(0.18885200000000002,0.0837648,1.1625199999999998), vec3(0.18180600000000002,0.0873724,1.1381599999999998), vec3(0.17476,0.09098,1.1138), vec3(0.16638200000000003,0.095352,1.07948), vec3(0.15800399999999998,0.09972400000000001,1.0451599999999999), vec3(0.14962599999999998,0.104096,1.01084), vec3(0.14124799999999998,0.10846800000000001,0.97652), vec3(0.13287,0.11284,0.9422), vec3(0.1246848,0.11807600000000001,0.9049520000000001), vec3(0.11649959999999998,0.123312,0.867704), vec3(0.1083144,0.128548,0.8304560000000001), vec3(0.10012919999999999,0.13378400000000001,0.7932079999999999), vec3(0.091944,0.13902,0.75596), vec3(0.0849522,0.14519,0.722048), vec3(0.0779604,0.15136,0.688136), vec3(0.07096859999999999,0.15753,0.6542239999999999), vec3(0.0639768,0.16369999999999998,0.620312), vec3(0.056985,0.16987,0.5864), vec3(0.05193420000000001,0.1775,0.558458), vec3(0.0468834,0.18513000000000002,0.530516), vec3(0.0418326,0.19276,0.502574), vec3(0.0367818,0.20039,0.474632), vec3(0.031731,0.20802,0.44669), vec3(0.028307400000000003,0.218032,0.425584), vec3(0.024883799999999998,0.228044,0.404478), vec3(0.0214602,0.238056,0.38337200000000005), vec3(0.0180366,0.24806799999999998,0.362266), vec3(0.014613,0.25808,0.34116), vec3(0.01266022,0.27106399999999997,0.32580200000000004), vec3(0.010707439999999999,0.28404799999999997,0.31044400000000005), vec3(0.008754660000000001,0.29703199999999996,0.29508599999999996), vec3(0.00680188,0.310016,0.279728), vec3(0.0048491,0.323,0.26437), vec3(0.0043435800000000005,0.33948,0.252684), vec3(0.00383806,0.35596,0.240998), vec3(0.00333254,0.37244,0.22931200000000002), vec3(0.00282702,0.38892,0.217626), vec3(0.0023215,0.4054,0.20594), vec3(0.0037151800000000002,0.42492,0.195642), vec3(0.005108860000000001,0.44444,0.185344), vec3(0.00650254,0.46396000000000004,0.175046), vec3(0.00789622,0.48348,0.164748), vec3(0.0092899,0.503,0.15445), vec3(0.01328752,0.524022,0.145396), vec3(0.01728514,0.5450440000000001,0.13634200000000002), vec3(0.021282759999999998,0.5660660000000001,0.127288), vec3(0.025280379999999998,0.587088,0.118234), vec3(0.029278,0.60811,0.10918), vec3(0.0361806,0.628488,0.102661), vec3(0.0430832,0.6488659999999999,0.096142), vec3(0.0499858,0.669244,0.08962300000000001), vec3(0.0568884,0.689622,0.083104), vec3(0.063791,0.71,0.076585), vec3(0.0731948,0.72702,0.0725134), vec3(0.0825986,0.74404,0.0684418), vec3(0.09200240000000001,0.76106,0.0643702), vec3(0.1014062,0.7780800000000001,0.0602986), vec3(0.11081,0.7951,0.056227), vec3(0.122032,0.8084800000000001,0.053254800000000005), vec3(0.133254,0.82186,0.0502826), vec3(0.144476,0.83524,0.0473104), vec3(0.155698,0.8486199999999999,0.044338199999999994), vec3(0.16692,0.862,0.041366), vec3(0.179072,0.87261,0.038963399999999995), vec3(0.191224,0.88322,0.036560800000000004), vec3(0.203376,0.89383,0.0341582), vec3(0.215528,0.90444,0.031755599999999995), vec3(0.22768,0.91505,0.029353), vec3(0.240682,0.92284,0.027490800000000003), vec3(0.253684,0.9306300000000001,0.0256286), vec3(0.266686,0.9384199999999999,0.0237664), vec3(0.279688,0.94621,0.0219042), vec3(0.29269,0.954,0.020042), vec3(0.30660200000000004,0.9592080000000001,0.018696), vec3(0.32051399999999997,0.9644159999999999,0.01735), vec3(0.334426,0.969624,0.016004), vec3(0.348338,0.974832,0.014658000000000001), vec3(0.36225,0.98004,0.013312), vec3(0.37707,0.9830220000000001,0.01240606), vec3(0.39189000000000007,0.986004,0.011500119999999999), vec3(0.40671,0.988986,0.01059418), vec3(0.42153000000000007,0.991968,0.009688239999999999), vec3(0.43635,0.99495,0.0087823), vec3(0.45210600000000006,0.99598,0.008197300000000001), vec3(0.467862,0.99701,0.0076123), vec3(0.483618,0.9980399999999999,0.0070273), vec3(0.499374,0.9990699999999999,0.0064423), vec3(0.51513,1.0001,0.0058573), vec3(0.5316000000000001,0.99908,0.0054957), vec3(0.54807,0.99806,0.0051341), vec3(0.56454,0.9970399999999999,0.0047725), vec3(0.58101,0.99602,0.0044109), vec3(0.59748,0.995,0.0040493), vec3(0.614226,0.99175,0.0038237799999999997), vec3(0.630972,0.9884999999999999,0.00359826), vec3(0.647718,0.98525,0.00337274), vec3(0.6644639999999999,0.982,0.00314722), vec3(0.68121,0.97875,0.0029217), vec3(0.697818,0.9734,0.00279278), vec3(0.714426,0.96805,0.00266386), vec3(0.731034,0.9626999999999999,0.00253494), vec3(0.747642,0.95735,0.00240602), vec3(0.76425,0.952,0.0022771), vec3(0.7801880000000001,0.9447160000000001,0.0022158), vec3(0.796126,0.9374319999999999,0.0021544999999999997), vec3(0.8120640000000001,0.930148,0.0020932), vec3(0.828002,0.9228639999999999,0.0020318999999999997), vec3(0.84394,0.91558,0.0019706), vec3(0.8584220000000001,0.906464,0.0019378), vec3(0.8729040000000001,0.897348,0.001905), vec3(0.887386,0.888232,0.0018721999999999999), vec3(0.901868,0.879116,0.0018394000000000001), vec3(0.91635,0.87,0.0018066), vec3(0.928486,0.8592460000000001,0.00175426), vec3(0.9406220000000001,0.848492,0.00170192), vec3(0.952758,0.8377380000000001,0.00164958), vec3(0.9648939999999999,0.8269839999999999,0.0015972400000000002), vec3(0.97703,0.81623,0.0015449), vec3(0.986224,0.804384,0.0014828800000000002), vec3(0.9954179999999999,0.792538,0.00142086), vec3(1.0046119999999998,0.7806919999999999,0.00135884), vec3(1.013806,0.768846,0.00129682), vec3(1.023,0.757,0.0012348), vec3(1.02866,0.7445660000000001,0.00121138), vec3(1.03432,0.732132,0.00118796), vec3(1.03998,0.719698,0.00116454), vec3(1.04564,0.707264,0.0011411199999999998), vec3(1.0513,0.69483,0.0011177), vec3(1.05204,0.682064,0.001075288), vec3(1.0527799999999998,0.669298,0.0010328759999999998), vec3(1.0535199999999998,0.656532,0.000990464), vec3(1.05426,0.643766,0.000948052), vec3(1.055,0.631,0.00090564), vec3(1.05124,0.6181080000000001,0.0008634460000000001), vec3(1.04748,0.605216,0.000821252), vec3(1.04372,0.5923240000000001,0.000779058), vec3(1.03996,0.5794320000000001,0.000736864), vec3(1.0362,0.56654,0.00069467), vec3(1.027438,0.5538320000000001,0.000641506), vec3(1.018676,0.541124,0.0005883419999999999), vec3(1.009914,0.528416,0.000535178), vec3(1.001152,0.515708,0.00048201399999999996), vec3(0.99239,0.503,0.00042885), vec3(0.9796340000000001,0.49074400000000007,0.000406714), vec3(0.9668780000000001,0.478488,0.000384578), vec3(0.9541220000000001,0.466232,0.000362442), vec3(0.941366,0.453976,0.000340306), vec3(0.92861,0.44172,0.00031817), vec3(0.9115800000000001,0.429576,0.000305732), vec3(0.8945500000000001,0.417432,0.000293294), vec3(0.8775200000000001,0.405288,0.000280856), vec3(0.86049,0.393144,0.000268418), vec3(0.84346,0.381,0.00025598), vec3(0.8227340000000001,0.368904,0.000236142), vec3(0.802008,0.356808,0.000216304), vec3(0.781282,0.344712,0.000196466), vec3(0.760556,0.332616,0.000176628), vec3(0.73983,0.32052,0.00015679), vec3(0.718442,0.309416,0.00014497080000000002), vec3(0.697054,0.298312,0.00013315160000000001), vec3(0.675666,0.287208,0.0001213324), vec3(0.6542779999999999,0.276104,0.00010951320000000001), vec3(0.63289,0.265,9.7694e-05), vec3(0.613014,0.255404,9.194400000000001e-05), vec3(0.5931379999999999,0.245808,8.6194e-05), vec3(0.5732619999999999,0.236212,8.0444e-05), vec3(0.553386,0.22661599999999998,7.469399999999999e-05), vec3(0.53351,0.21702,6.8944e-05), vec3(0.5149320000000001,0.208616,6.53882e-05), vec3(0.496354,0.200212,6.18324e-05), vec3(0.47777600000000003,0.19180799999999998,5.82766e-05), vec3(0.459198,0.18340399999999998,5.4720800000000006e-05), vec3(0.44062,0.175,5.1165e-05), vec3(0.42340200000000006,0.167624,4.8135200000000006e-05), vec3(0.406184,0.160248,4.51054e-05), vec3(0.38896600000000003,0.15287199999999998,4.207560000000001e-05), vec3(0.371748,0.145496,3.9045800000000005e-05), vec3(0.35453,0.13812,3.6016e-05), vec3(0.33934800000000004,0.131896,3.36604e-05), vec3(0.32416599999999995,0.125672,3.13048e-05), vec3(0.30898400000000004,0.119448,2.89492e-05), vec3(0.29380199999999995,0.113224,2.6593600000000002e-05), vec3(0.27862,0.107,2.4238e-05), vec3(0.265866,0.1019304,2.2773400000000005e-05), vec3(0.253112,0.0968608,2.13088e-05), vec3(0.240358,0.0917912,1.9844200000000002e-05), vec3(0.22760400000000003,0.08672160000000001,1.83796e-05), vec3(0.21485,0.081652,1.6915e-05), vec3(0.20420200000000005,0.07752160000000001,1.5913200000000002e-05), vec3(0.193554,0.0733912,1.49114e-05), vec3(0.182906,0.06926080000000001,1.39096e-05), vec3(0.17225800000000002,0.0651304,1.29078e-05), vec3(0.16161,0.061,1.1906e-05), vec3(0.152928,0.057665400000000006,1.115458e-05), vec3(0.14424599999999999,0.0543308,1.040316e-05), vec3(0.13556400000000002,0.0509962,9.65174e-06), vec3(0.126882,0.0476616,8.900319999999998e-06), vec3(0.1182,0.044327,8.1489e-06), vec3(0.11171060000000001,0.041861600000000006,7.639239999999999e-06), vec3(0.10522119999999999,0.0393962,7.129579999999999e-06), vec3(0.09873180000000001,0.0369308,6.6199200000000005e-06), vec3(0.09224239999999999,0.0344654,6.1102599999999995e-06), vec3(0.085753,0.032,5.6006e-06), vec3(0.08121779999999999,0.0302908,5.27136e-06), vec3(0.07668259999999999,0.0285816,4.94212e-06), vec3(0.0721474,0.026872399999999998,4.61288e-06), vec3(0.06761219999999998,0.0251632,4.28364e-06), vec3(0.063077,0.023454,3.9544e-06), vec3(0.0596284,0.0221632,3.7217600000000003e-06), vec3(0.0561798,0.0208724,3.48912e-06), vec3(0.05273119999999999,0.0195816,3.25648e-06), vec3(0.049282599999999996,0.0182908,3.02384e-06), vec3(0.045834,0.017,2.7912e-06), vec3(0.04307860000000001,0.0159744,2.61648e-06), vec3(0.040323200000000003,0.014948800000000002,2.44176e-06), vec3(0.0375678,0.0139232,2.26704e-06), vec3(0.0348124,0.012897600000000002,2.09232e-06), vec3(0.032057,0.011872,1.9176e-06), vec3(0.030083000000000006,0.011139600000000003,1.7967800000000002e-06), vec3(0.028109000000000002,0.0104072,1.6759599999999999e-06), vec3(0.026135,0.0096748,1.55514e-06), vec3(0.024161000000000002,0.0089424,1.4343199999999999e-06), vec3(0.022187,0.00821,1.3135e-06), vec3(0.020872,0.007722460000000001,1.233838e-06), vec3(0.019556999999999998,0.007234920000000001,1.154176e-06), vec3(0.018242,0.006747380000000001,1.074514e-06), vec3(0.016926999999999998,0.006259840000000001,9.94852e-07), vec3(0.015612,0.0057723,9.1519e-07), vec3(0.0147092,0.0054382400000000004,8.61686e-07), vec3(0.0138064,0.00510418,8.081819999999999e-07), vec3(0.012903600000000001,0.00477012,7.54678e-07), vec3(0.012000799999999999,0.0044360599999999995,7.01174e-07));

fn wavelength_to_idx(wavelength: float) -> int {
    return int(wavelength - WL_START);
}

struct seed_t {
    v: uint3
};

const k = 1103515245u;
fn get_next_rnd(x: ptr<function, seed_t>) -> float3 {

    (*x).v = (((*x).v >> uint3(8u)) ^ (*x).v.yzx) * k;
    (*x).v = (((*x).v >> uint3(8u)) ^ (*x).v.yzx) * k; 
    (*x).v = (((*x).v >> uint3(8u)) ^ (*x).v.yzx) * k;

    return vec3<float>((*x).v) * (1. / float(0xffffffffu));
}

fn random_cos_weighted_hemisphere_direction(n: float3, seed: ptr<function, seed_t>) -> float3 {
    let  r = get_next_rnd(seed).xy;
    let uu = normalize(cross(n, select(float3(0,1,0), float3(1,0,0), abs(n.y) > .5)));
    let vv = cross(uu, n);
    let ra = sqrt(r.y);
    let rx = ra * cos(TAU * r.x);
    let ry = ra * sin(TAU * r.x);
    let rz = sqrt(1. - r.y);
    let rr = float3(rx * uu + ry * vv + rz * n);
    return normalize(rr);
}

struct ray {
    origin: float3,
    direction: float3,
    wavelength: float
}

struct hit_rec {
    position: float3,
    normal: float3,
    dist: float,
    mat_type: int
}

//MATS

fn perfect_mirror(r_in: ray, rec: hit_rec, r_out: ptr<function, ray>, seed: ptr<function, seed_t>) -> float {
    (*r_out).origin = rec.position;
    (*r_out).direction = normalize(reflect(r_in.direction, rec.normal));
    (*r_out).wavelength = r_in.wavelength;

    return 1.;
}

fn generic_diffuse(r_in: ray, rec: hit_rec, r_out: ptr<function, ray>, seed: ptr<function, seed_t>) {
    (*r_out).direction = random_cos_weighted_hemisphere_direction(rec.normal, seed);
    (*r_out).origin = rec.position + T_MIN * (*r_out).direction;
    (*r_out).wavelength = r_in.wavelength;
}

fn diffuse_white(r_in: ray, rec: hit_rec, r_out: ptr<function, ray>, seed: ptr<function, seed_t>) -> float {
    generic_diffuse(r_in, rec, r_out, seed);

    let wl_idx = wavelength_to_idx((*r_out).wavelength);
    return white[wl_idx];
}

fn diffuse_red(r_in: ray, rec: hit_rec, r_out: ptr<function, ray>, seed: ptr<function, seed_t>) -> float {
    generic_diffuse(r_in, rec, r_out, seed);

    let wl_idx = wavelength_to_idx((*r_out).wavelength);
    return red[wl_idx];
}

fn diffuse_green(r_in: ray, rec: hit_rec, r_out: ptr<function, ray>, seed: ptr<function, seed_t>) -> float {
    generic_diffuse(r_in, rec, r_out, seed);

    let wl_idx = wavelength_to_idx((*r_out).wavelength);
    return green[wl_idx];
}

fn emissive(r_in: ray, rec: hit_rec, r_out: ptr<function, ray>, seed: ptr<function, seed_t>) -> float {
    let wl_idx = wavelength_to_idx(r_in.wavelength);
    return light[wl_idx];
}

//OBJS

struct triangle {
    a: float3,
    b: float3,
    c: float3,
    mat_type: int
}

#define EPS 1e-5
fn hit_triangle(t: triangle, r: ray, rec: ptr<function, hit_rec>) {
    let e1 = t.b - t.a;
    let e2 = t.c - t.a;
    let q = cross(r.direction, e2);
    let a = dot(e1, q);

    (*rec).dist = -1.;

    if(a > -EPS && a < EPS) {
        return;
    }

    let f = 1. / a;
    let s = r.origin - t.a;
    let u = f * dot(s, q);

    if(u < 0. || u > 1.) {
        return;
    }

    let rt = cross(s, e1);
    let v = f * dot(r.direction, rt);

    if(v < 0. || (u + v) > 1.) {
        return;
    }

    (*rec).dist     = f * dot(e2, rt);
    (*rec).position = r.origin + (*rec).dist * r.direction;
    (*rec).normal   = normalize(cross(e1, e2));
    (*rec).mat_type = t.mat_type;
}

struct QUAD {
    _a: float3,
    _b: float3,
    _c: float3,
    _d: float3,
    m: int
}

const n_triangles:int = 32;

const c_box = array<QUAD, 16>(
        // Light
    QUAD(
        float3(343.0, 548.7, 332.0),
        float3(213.0, 548.7, 332.0),
        float3(213.0, 548.7, 227.0),
        float3(343.0, 548.7, 227.0),
        MAT_EMISSIVE),
    
    // Floor
    QUAD(
        float3(  0.0, 0.0, 559.2),
        float3(552.8, 0.0, 559.2),
        float3(552.8, 0.0,   0.0),
        float3(  0.0, 0.0,   0.0),
        MAT_DIFFUSE_W),

    // Ceiling
    QUAD(
        float3(552.8, 548.8, 559.2),
        float3(  0.0, 548.8, 559.2),
        float3(  0.0, 548.8,   0.0),
        float3(552.8, 548.8,   0.0),
        MAT_DIFFUSE_W),
    
    // Back Wall
    QUAD(
        float3(552.8,   0.0, 559.2),
        float3(  0.0,   0.0, 559.2),
        float3(  0.0, 548.8, 559.2),
        float3(552.8, 548.8, 559.2),
        MAT_DIFFUSE_W),
    
    // Right Wall
    QUAD(
        float3(  0.0,   0.0,   0.0), 
        float3(  0.0, 548.8,   0.0),
        float3(  0.0, 548.8, 559.2),
        float3(  0.0,   0.0, 559.2),
        MAT_DIFFUSE_G),
    
    // Left Wall
    QUAD(
        float3(552.8,   0.0,   0.0),
        float3(552.8,   0.0, 559.2), 
        float3(552.8, 548.8, 559.2),
        float3(552.8, 548.8,   0.0),
        MAT_DIFFUSE_R),

    // Short block
    // top
    QUAD(
        float3(130.0, 165.0,  65.0),
        float3( 82.0, 165.0, 225.0),
        float3(240.0, 165.0, 272.0),
        float3(290.0, 165.0, 114.0),
        MAT_DIFFUSE_W),
    // left
    QUAD(
        float3(290.0,  0.0, 114.0),
        float3(290.0, 165.0, 114.0),
        float3(240.0, 165.0, 272.0),
        float3(240.0,   0.0, 272.0),
        MAT_DIFFUSE_W),
    // front
    QUAD(
        float3(130.0,   0.0,  65.0),
        float3(130.0, 165.0,  65.0),
        float3(290.0, 165.0, 114.0),
        float3(290.0,   0.0, 114.0),
        MAT_DIFFUSE_W),
    // right
    QUAD(
        float3(82.0 ,   0.0, 225.0),
        float3(82.0 , 165.0, 225.0),
        float3(130.0, 165.0,  65.0),
        float3(130.0,   0.0,  65.0),
        MAT_DIFFUSE_W),
    // back
    QUAD(
        float3(240.0,   0.0, 272.0),			
        float3(240.0, 165.0, 272.0),
        float3( 82.0, 165.0, 225.0),
        float3( 82.0,   0.0, 225.0),
        MAT_DIFFUSE_W),

    // Tall block
    // back
    QUAD(
        float3(472.0,   0.0, 406.0),
        float3(472.0, 330.0, 406.0),
        float3(314.0, 330.0, 456.0),
        float3(314.0,   0.0, 456.0),
        MAT_DIFFUSE_W),
    // top
    QUAD(
        float3(423.0, 330.0, 247.0),
        float3(265.0, 330.0, 296.0),
        float3(314.0, 330.0, 456.0),
        float3(472.0, 330.0, 406.0),
        MAT_DIFFUSE_W),
    // left
    QUAD(
        float3(423.0,   0.0, 247.0),
        float3(423.0, 330.0, 247.0),
        float3(472.0, 330.0, 406.0),
        float3(472.0,   0.0, 406.0),
        MAT_DIFFUSE_W),
    // right 
    QUAD(
        float3(314.0,   0.0, 456.0),
        float3(314.0, 330.0, 456.0),
        float3(265.0, 330.0, 296.0),
        float3(265.0,   0.0, 296.0),
        MAT_DIFFUSE_W),
    // front
    QUAD(
        float3(265.0,   0.0, 296.0),
        float3(265.0, 330.0, 296.0),
        float3(423.0, 330.0, 247.0),
        float3(423.0,   0.0, 247.0),
        MAT_DIFFUSE_W)
);

fn hit(r_in: ray, r_out: ptr<function, ray>, stop: ptr<function, bool>, seed: ptr<function, seed_t>) -> float {
    let d1 = -1.;
    let d2 = -1.;

    var rec: hit_rec;
    var curr_rec: hit_rec;

    (*stop) = false;
    rec.dist = -1.;

    for(var i = 0; i < n_triangles; i++) {
        var tri: triangle = triangle();
        let quad = c_box[i/2];
        if(i%2==0) {
            tri = triangle(quad._a, quad._b, quad._c, quad.m);
        } else {
            tri = triangle(quad._c, quad._d, quad._a, quad.m);
        }
        hit_triangle(tri, r_in, &curr_rec);
        if (curr_rec.dist > 0. && (curr_rec.dist < rec.dist || rec.dist < 0.)) {
            rec = curr_rec;
        }
    }

    if (rec.dist > 0.) {
        if (rec.mat_type == MAT_MIRROR) {
     		return perfect_mirror(r_in, rec, r_out, seed);   
        } else if (rec.mat_type == MAT_DIFFUSE_W) {
            return diffuse_white(r_in, rec, r_out, seed);   
        } else if (rec.mat_type == MAT_DIFFUSE_R) {
            return diffuse_red(r_in, rec, r_out, seed);   
        } else if (rec.mat_type == MAT_DIFFUSE_G) {
            return diffuse_green(r_in, rec, r_out, seed);   
        } else if (rec.mat_type == MAT_EMISSIVE) {
         	(*stop) = true;
            return emissive(r_in, rec, r_out, seed);
        }
    }

    (*stop) = true;
    return 0.;
}

// PATH

fn trace_ray(r: ptr<function, ray>, seed: ptr<function, seed_t>) -> float {
    var reflectance = 1.;
    var stop = false;
    for(var i = 0; i < 10; i++) {
        reflectance *= hit(*r, r, &stop, seed);
        if (stop) { break; }
    }

    if (stop) {
        return reflectance;
    } else {
        return 0.;
    }
}

struct camera {
    look_from: float3,
    look_at: float3,
    up: float3,
    fov: float,
    aspect: float
}

fn get_ray(c: camera, uv: float2, wavelength: float) -> ray {
    let theta = c.fov * PI / 180.;
    let h_height = tan(theta / 2.);
    let h_width = c.aspect * h_height;

    let w = normalize(c.look_from - c.look_at);
    let u = normalize(cross(c.up, w));
    let v = cross(w, u);

    let ll = c.look_from - h_width * u - h_height * v - w;
    let horizontal = 2. * h_width * u;
    let vertical = 2. * h_height * v;

    return ray(
        c.look_from,
        normalize(ll + uv.x * horizontal + uv.y * vertical - c.look_from),
        wavelength
    );
}

fn to_sRGB(c: float) -> float {
    if (abs(c) < .0031308) {
        return c * 12.92;
    } else {
        return 1.055 * pow(c, 1. / 2.4) - .055;
    }
}

@compute @workgroup_size(16, 16)
fn fps_pass(@builtin(global_invocation_id) id: uint3) {
    let screen_size = uint2(textureDimensions(screen));
    let resolution = float2(screen_size);

    // Prevent overdraw for workgroups on the edge of the viewport
    if (id.x >= screen_size.x || id.y >= screen_size.y) { return; }

    // Pixel coordinates (centre of pixel, origin at bottom left)
    let fragCoord = float2(float(id.x) + .5, float(screen_size.y - id.y) - .5);

    // Normalised pixel coordinates (from 0 to 1)
    let uv = fragCoord / float2(screen_size);

    var col = float4(0);

    var prevParams: float4 = passLoad(0, int2(id.xy), 0);

    if (time.frame == 0 ||
        abs(prevParams.x - resolution.x) > 1. ||
        abs(prevParams.y - resolution.y) > 1.) {
            col = float4(resolution, 1., 0.);
        } else {
            col = float4(resolution, prevParams.z, 1.);
    }

    let framerate = float(time.frame) / time.elapsed;
    if (col.w > .5 && time.frame % 10 == 0) {
        if (framerate >= 30.) {
            col.z = 2. * prevParams.z;
        } else if (framerate <= 20.) {
            col.z = prevParams.z / 2.;
        }
    }

    textureStore(pass_out, int2(id.xy), 0, col);
}

@compute @workgroup_size(16, 16)
fn compute_pass(@builtin(global_invocation_id) id: uint3) {
    let screen_size = uint2(textureDimensions(screen));
    let resolution = float2(screen_size);

    // Prevent overdraw for workgroups on the edge of the viewport
    if (id.x >= screen_size.x || id.y >= screen_size.y) { return; }

    // Pixel coordinates (centre of pixel, origin at bottom left)
    let fragCoord = float2(float(id.x) + .5, float(screen_size.y - id.y) - .5);

    // Normalised pixel coordinates (from 0 to 1)
    let uv = fragCoord / float2(screen_size);

    var prevParams = textureLoad(pass_in, int2(id.xy), 0, 0);

    let samples_per_frame = int(clamp(prevParams.z, 1., 128.));

    var seed = seed_t(uint3(id.xy, time.frame));

    var col_xyz = float3(0);

    for(var i = 0; i < samples_per_frame; i++) {
        let offset = get_next_rnd(&seed).xy;
        let uv = (fragCoord + offset) / resolution;

        let wavelength = WL_START + get_next_rnd(&seed).x * float(WL_SAMPLES);

        let cam = camera(
            vec3(278.0, 273.0, -800.0),
            vec3(278.0, 273.0,  800.0), 
            vec3(0.0, 1.0, 0.0), 
            39.3076, // 2.0*atan(sensor_width/(2.0*focal_length))
            resolution.x/resolution.y
        );

        var r = get_ray(cam, uv, wavelength);

        let col = trace_ray(&r, &seed);

        let wl_idx = wavelength_to_idx(r.wavelength);
        col_xyz += xyz_bar[wl_idx] * col;
    }

    let idx: u32 = id.y * screen_size.x + id.x;
    if(prevParams.w > .5) {
        let prevVal = store[idx];
        store[idx] = prevVal + float4(col_xyz, float(samples_per_frame));
    } else {
        store[idx] = float4(col_xyz, float(samples_per_frame));
    }
}

@compute @workgroup_size(16, 16)
fn main_image(@builtin(global_invocation_id) id: uint3) {
    // Viewport resolution (in pixels)
    let idx: u32 = id.y * textureDimensions(screen).x + id.x;
    var col_xyz = store[idx];
    col_xyz /= col_xyz.w;

    let xyz_to_rgb = mat3x3<float>(
        vec3( 3.2406, -0.9689,  0.0557),
        vec3(-1.5372,  1.8758, -0.2040),
        vec3(-0.4986,  0.0415,  1.0570));

    var col_rgb = xyz_to_rgb * col_xyz.xyz;
    
    col_rgb *= exp2(3.5);
    
    col_rgb = 1.0 - exp( -col_rgb );

    // Output to screen (linear colour space)
    textureStore(screen, int2(id.xy), float4(col_rgb,
        1.)
    );
}
