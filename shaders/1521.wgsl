const unsrgb = array(
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
     16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
     32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
     48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
     64,  65,  66,  67,  68,   0,  69,  70,  71,  72,  73,  74,  75,  76,  77,   0,
     78,  79,  80,  81,  82,   0,  83,  84,  85,  86,  87,   0,  88,  89,  90,   0,
     91,  92,  93,  94,   0,  95,  96,   0,  97,  98,  99,   0, 100, 101, 102,   0,
    103, 104,   0, 105, 106,   0, 107, 108, 109,   0, 110, 111,   0, 112, 113,   0,
    114, 115,   0, 116, 117,   0, 118,   0, 119, 120,   0, 121, 122,   0, 123,   0,
    124, 125,   0, 126,   0, 127, 128,   0, 129,   0, 130, 131,   0, 132,   0, 133,
    134,   0, 135,   0, 136,   0, 137,   0, 138, 139,   0, 140,   0, 141,   0, 142,
      0, 143, 144,   0, 145,   0, 146,   0, 147,   0, 148,   0, 149,   0, 150,   0,
    151,   0, 152,   0, 153,   0, 154,   0, 155,   0, 156,   0, 157,   0, 158,   0,
    159,   0, 160,   0, 161,   0, 162,   0, 163,   0, 164,   0, 165,   0, 166,   0,
    167,   0, 168,   0, 169,   0,   0, 170,   0, 171,   0, 172,   0, 173,   0, 174,
      0, 175,   0, 176,   0, 177,   0,   0,   0, 178,   0, 179,   0, 180,   0, 181
);

@compute @workgroup_size(16, 16)
fn main(@builtin(global_invocation_id) id: vec3<u32>) {
    if (id.x >= SCREEN_WIDTH || id.y >= SCREEN_HEIGHT) { return; }
    var color = vec3<f32>(0.0);

    var u = f32(id.x) / f32(SCREEN_WIDTH);
    var expectedValue = i32(trunc(u * 182.0));
    var actualValue = unsrgb[i32(trunc(textureLoad(channel1, vec2<i32>(expectedValue, 0), 0).r * 255.0))];

    if (actualValue == expectedValue) {
        color.g = 1.0;
    } else {
        color.r = 1.0;
    }

    textureStore(screen, id.xy, vec4<f32>(color, 1.0));
}